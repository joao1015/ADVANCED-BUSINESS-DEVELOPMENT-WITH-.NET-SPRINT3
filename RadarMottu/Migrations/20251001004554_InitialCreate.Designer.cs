// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RadarMottuAPI.Data;

#nullable disable

namespace RadarMottuAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251001004554_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("RadarMottuAPI.Models.Anchor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("RangeMeters")
                        .HasColumnType("REAL");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Anchors");
                });

            modelBuilder.Entity("RadarMottuAPI.Models.Moto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("LastLat")
                        .HasColumnType("REAL");

                    b.Property<double?>("LastLng")
                        .HasColumnType("REAL");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId")
                        .IsUnique();

                    b.ToTable("Motos");
                });

            modelBuilder.Entity("RadarMottuAPI.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MotoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("RadarMottuAPI.Models.Moto", b =>
                {
                    b.HasOne("RadarMottuAPI.Models.Tag", "Tag")
                        .WithOne("Moto")
                        .HasForeignKey("RadarMottuAPI.Models.Moto", "TagId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("RadarMottuAPI.Models.Tag", b =>
                {
                    b.Navigation("Moto");
                });
#pragma warning restore 612, 618
        }
    }
}
